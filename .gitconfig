[include]
    path = ~/.gitconfig.local
[core]
	editor = nvim
    excludesfile = ~/.gitignore_global
	whitespace = cr-at-eol
[pull]
    rebase = preserve
[push]
	default = upstream
[merge]
	conflictstyle = diff3
	tool = vimdiff
[fetch]
	prune = true
[diff]
    tool = vimdiff
[mergetool]
	prompt = false
[alias]
    lg = !"git lg1-specific --all"
    lg1 = !"git lg1-specific --all --stat"
    lg2 = !"git lg2-specific --all"
    lg3 = !"git lg3-specific --all"

    lg1-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'
    lg2-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
    lg3-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'

    aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /' | sort

    clinhead = !"git branch --merged | grep -v '\\*\\|master\\|develop' | xargs -n 1 git branch -d"
    clinmaster = !"git branch --merged origin/master | grep -v '\\*\\|master\\|develop' | xargs -n 1 git branch -d"

    # Andrey good stuff: display and sort all branches chronologically
    brd = "! f() { for k in $(git branch $@ | sed 's/^..//; s/ .*//'); do  echo "$(git log -1 --pretty='%Cgreen%ci %Cblue(%cr)%Creset ' $k) $k" ;  done | sort -r; }; f"

    # Get latest commits from master and rebase the current branch on it :
        # "pull origin master" fetch the latest changes for origin/master and merge/rebase them into local master. 
        # "--rebase" rebase the current branch onto origin/master which is now at the exact same commit as local master. So it is the same as rebasing on local master.
    rom = pull --rebase origin master

    # Update master from remote origin master without checking out from my current branch. Works only for fast-forward merges (which should always be the case when updating master from origin master).
    upm = fetch origin master:master

    rbim = rebase -i master
[pager]
	branch = false
