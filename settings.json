{
    ///// general /////

    "terminal.integrated.shell.osx": "/bin/zsh",
    "terminal.external.osxExec": "iTerm.app",
    "terminal.integrated.fontFamily": "Meslo LG M DZ for Powerline",
    "terminal.integrated.fontSize": 13,
    "files.trimTrailingWhitespace": true,
    "editor.fontFamily": "Menlo",
    "editor.fontSize": 13,
    "files.exclude": {
        ".*": true
    },
    "window.zoomLevel": 0,
    "editor.wordWrap": "off",
    "editor.parameterHints.cycle": true,
    "files.trimFinalNewlines": true,
    "window.closeWhenEmpty": true, // does not seem to work :/
    "search.smartCase": true,
    "search.useGlobalIgnoreFiles": true,
    "debug.console.fontSize": 13,
    "terminal.integrated.macOptionClickForcesSelection": true,
    "editor.minimap.enabled": false,
    "workbench.editor.enablePreview": false,
    "editor.renderWhitespace": "selection",
    "workbench.startupEditor": "newUntitledFile",
    "editor.peekWidgetDefaultFocus": "editor",
    "editor.rulers": [120],
    "workbench.colorCustomizations": {
        "editorRuler.foreground": "#2E2E2E"
    },




    ///// intelliSense /////
    "editor.tabCompletion": "on",
    "editor.acceptSuggestionOnEnter": "off",



    ///// vim /////

    "vim.leader": "<space>",
    "vim.easymotion": true,
    "vim.incsearch": true,
    "vim.useSystemClipboard": true,
    "vim.useCtrlKeys": true,
    "vim.hlsearch": true,
    // start a search from the current visual selection by pressing * or #
    "vim.visualstar": true,
    // enable neovim
    "vim.neovimPath": "/usr/local/bin/nvim",
    "vim.enableNeovim": true,

    // just during the setting up phase, to take out later
    "vim.debug.loggingLevelForConsole": "debug",

    "vim.insertModeKeyBindingsNonRecursive": [
        {
        "before": ["j", "j"],
        "after": ["<Esc>"]
        },
        // dirty hack to use vscode search instead of vim one. Setting this shortcut in normal mode only messed up other modes
        {
        "before": ["/"],
        "after": ["/"]
        },
    ],
    "vim.normalModeKeyBindingsNonRecursive": [
        // avoid pressing shift to enter commands
        {
        "before": [";"],
        "after": [":"]
        },
        // toggle search/replace
        {
        "before": ["<leader", "/"],
        "after": ["editor.action.startFindReplaceAction"]
        },
        // select all
        {
        "before": ["<leader>", "a"],
        "after": ["<esc>","g","g","V","G","<CR>"]
        },
        // select word
        {
        "before": ["<leader>", "s", "w"],
        "after": ["b", "v", "e"]
        },
        // copy word
        {
        "before": ["<leader>", "c", "w"],
        "after": ["b", "y", "e"]
        },
        // paste on next line
        {
        "before": ["<leader>", "p", "n"],
        "after": ["o", "<ESC>", "p"]
        },
        // reload file (for when it has been modified outside of vim/vscode)
        {
        "before": ["<leader>", "r", "f"],
        "commands": [":edit"]
        },
        // triggers delete without putting in buffer
        {
        "before": ["<leader>", "d"],
        "after": ["\"", "_", "d"]
        },
        // delete line without putting in buffer
        {
        "before": ["<leader>", "l", "d"],
        "after": ["\"", "_", "d", "d"]
        },
        // delete from cursor until EOL without putting in buffer
        {
        "before": ["<leader>", "D"],
        "after": ["\"", "_", "D"]
        },
        // yank from cursor until EOL
        {
        "before": ["Y"],
        "after": ["y", "$"]
        },
        // use vscode search instead of vim one
        {
        "before": ["/"],
        "commands": ["actions.find"]
        },
        // clear search matching - NotUsed
        {
        "before": ["<leader>", "c", "l"],
        "after": [":", "n", "o", "h", "<CR>"]
        },
        // keep search in the middle of the window - NotUsed
        {
        "before": ["n"],
        "after": ["n", "z", "z", "z", "v"]
        },
        {
        "before": ["N"],
        "after": ["N", "z", "z", "z", "v"]
        },
        // remap 0 to first non-blank character
        {
        "before": ["0"],
        "after": ["^"]
        },
        // comment line
        {
        "before": ["<leader>", "c", "c"],
        "commands": ["editor.action.addCommentLine"]
        },
        // uncomment line
        {
        "before": ["<leader>", "c", "u"],
        "commands": ["editor.action.removeCommentLine"]
        },
        // kill current buffer (~= close active window in vscode)
        {
        "before": ["<leader>", "b", "d"],
        "commands": ["workbench.action.closeActiveEditor"]
        },
        // kill all buffers
        {
        "before": ["<leader>", "b", "b", "d"],
        "commands": ["workbench.action.closeAllEditors"]
        // "commands": ["workbench.action.closeOtherEditors"]  // if you want kill all buffers except the current one
        },
    ],
    "vim.visualModeKeyBindingsNonRecursive": [
        // triggers delete without putting in buffer
        {
        "before": ["<leader>", "d"],
        "after": ["\"", "_", "d"]
        },
        // delete line without putting in buffer
        {
        "before": ["<leader>", "l", "d"],
        "after": ["\"", "_", "d", "d"]
        },
        // delete from cursor until EOL without putting in buffer
        {
        "before": ["<leader>", "D"],
        "after": ["\"", "_", "D"]
        },
        // yank from cursor until EOL
        {
        "before": ["Y"],
        "after": ["y", "$"]
        },
        // comment line
        {
        "before": ["<leader>", "c", "c"],
        "commands": ["editor.action.addCommentLine"]
        },
        // uncomment line
        {
        "before": ["<leader>", "c", "u"],
        "commands": ["editor.action.removeCommentLine"]
        },
        // search current selection
        {
        "before": ["?"],
        "commands": ["actions.findWithSelection"]
        },
        // dirty hack to use vscode search instead of vim one. Setting this shortcut in normal mode only messed up other modes
        {
        "before": ["/"],
        "after": ["/"]
        },
    ],

    // delegate these keys to be handled by vscode
    "vim.handleKeys": {
        //"<C-b>": false
    },



        ///// typescript /////

    "typescript.implementationsCodeLens.enabled": true,

    // eslint
    // auto lint on save
    "eslint.run": "onSave",
    // auto fix on save
    "[typescript]": {
        "editor.codeActionsOnSave": {
            "source.fixAll.eslint": true
        }
    },



        ///// golang /////

    // To enable goimports when using go modules
    "go.formatTool": "goimports",

    // enable go language server
    //"go.useLanguageServer": true,

    // gometalinter may be quite slow, in this case configure some go.lintFlags or use golangci-lint or the default golint
    // "go.lintTool": "gometalinter",

    // If want to use debugging, install delve



        ///// python /////

    "python.formatting.provider": "black",
    "python.formatting.blackArgs": ["--skip-string-normalization"],

    "python.linting.pylintEnabled": false,
    "python.linting.pylamaEnabled": true,
    "python.linting.pylamaArgs": ["--ignore=E303,E501,D400"],
    "python.linting.ignorePatterns": [".vscode/*.py", "**/site-packages/**/*.py", ".env/*.py"],

    // For Intellicode the 3 following lines are needed
    "editor.suggestSelection": "first",
    "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",
    // Use python language server instead of jedi
    "python.jediEnabled": false,
    "python.languageServer": "Microsoft",

    "python.autoComplete.addBrackets": true,



        ///// SQL /////
    "[sql]": {
        "editor.defaultFormatter": "ckolkman.vscode-postgres"
    },
    "extensions.ignoreRecommendations": false,

}
